{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://zhanghuimeng.github.io/blog-example"},"pages":[{"title":"所有分类","date":"2019-04-03T11:06:34.098Z","updated":"2019-04-03T11:06:34.098Z","comments":true,"path":"categories/index.html","permalink":"http://zhanghuimeng.github.io/blog-example/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-04-03T11:06:34.110Z","updated":"2019-04-03T11:06:34.110Z","comments":true,"path":"tags/index.html","permalink":"http://zhanghuimeng.github.io/blog-example/tags/index.html","excerpt":"","text":""},{"title":"Page","date":"2013-12-26T14:52:56.000Z","updated":"2019-04-03T11:06:34.038Z","comments":true,"path":"about/index.html","permalink":"http://zhanghuimeng.github.io/blog-example/about/index.html","excerpt":"","text":"This is a page test."},{"title":"我的朋友们","date":"2019-04-03T11:06:34.103Z","updated":"2019-04-03T11:06:34.103Z","comments":true,"path":"friends/index.html","permalink":"http://zhanghuimeng.github.io/blog-example/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu's blog 头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg 网址： https://xaoxuu.com/blog/ 标签： iOS"}],"posts":[{"title":"hexo-sage-posts测试","slug":"2019-04-07-hexo-sage-posts测试","date":"2019-04-07T14:31:45.000Z","updated":"2019-04-07T14:34:03.886Z","comments":true,"path":"hexo-sage-posts-test/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/hexo-sage-posts-test/","excerpt":"","text":"这篇文章不应该出现在主页列表里。 只能通过链接访问。","categories":[],"tags":[{"name":"Test","slug":"Test","permalink":"http://zhanghuimeng.github.io/blog-example/tags/Test/"}]},{"title":"环境和mathjax导入测试","slug":"2019-04-04-环境和mathjax导入测试","date":"2019-04-04T07:02:14.000Z","updated":"2019-04-04T13:10:52.984Z","comments":true,"path":"environment-and-mathjax-import/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/environment-and-mathjax-import/","excerpt":"我的博客现状 我自己的博客目前的状况是这样的：可以纯用mathjax，也可以纯用katex，但是本地显示会崩，推到gh-pages上也会崩。而且因为我用Travis-CI，所以远程环境和自己的环境结果可能还会有差异。","text":"我的博客现状 我自己的博客目前的状况是这样的：可以纯用mathjax，也可以纯用katex，但是本地显示会崩，推到gh-pages上也会崩。而且因为我用Travis-CI，所以远程环境和自己的环境结果可能还会有差异。 package.json如下： 1234567891011121314151617181920212223242526272829&#123; \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": &#123; \"version\": \"3.7.1\" &#125;, \"dependencies\": &#123; \"hexo\": \"^3.2.0\", \"hexo-autoprefixer\": \"^2.0.0\", \"hexo-deployer-git\": \"^1.0.0\", \"hexo-generator-archive\": \"^0.1.4\", \"hexo-generator-category\": \"^0.1.3\", \"hexo-generator-feed\": \"^1.2.2\", \"hexo-generator-index\": \"^0.2.0\", \"hexo-generator-json-content\": \"^3.0.1\", \"hexo-generator-search\": \"^2.4.0\", \"hexo-generator-seo-friendly-sitemap\": \"0.0.22\", \"hexo-generator-tag\": \"^0.2.0\", \"hexo-helper-qrcode\": \"^1.0.2\", \"hexo-inject\": \"^1.0.0\", \"hexo-math\": \"^3.0.4\", \"hexo-renderer-ejs\": \"^0.2.0\", \"hexo-renderer-less\": \"^1.0.0\", \"hexo-renderer-markdown-it-plus\": \"^1.0.4\", \"hexo-renderer-stylus\": \"^0.3.1\", \"hexo-server\": \"^0.2.0\" &#125;&#125; 本地环境如下： OS: Windows 10 node.js: v6.10.2 npm: 3.10.10 Travis Server环境如下： OS: Ubuntu 14.04.5 LTS node.js: v11.13.0 npm: 6.7.0 上面的重点可能是我用hexo-renderer-markdown-it-plus渲染markdown（按照在material-x上使用KaTeX一文中提到的方法，并且装了hexo-math）。 纯用mathjax 此时（我能想到的）配置（和不配置）内容如下： 在博客根目录_config.yml中添加 12math: engine: 'mathjax' 在post的front-matter中添加mathjax: true 在hexo-renderer-markdown-it-plus中禁用markdown-it-katex插件 此时本地和远程渲染结果相同。 注意到一个事实：公式对应的字符仍然被渲染了，而且，以上面那个r为例，它渲染出来的HTML外层仍然叫katex，整个元素如下： 123456789101112131415161718&lt;span class=\"katex\"&gt; &lt;span class=\"katex-mathml has-jax has-jax\"&gt; &lt;span class=\"MathJax_Preview\" style=\"color: inherit; display: none;\"&gt;&lt;/span&gt; &lt;span id=\"MathJax-Element-1-Frame\" class=\"mjx-chtml MathJax_CHTML\" tabindex=\"0\" data-mathml=\"&lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&amp;quot;application/x-tex&amp;quot;&gt; r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;\" role=\"presentation\" style=\"font-size: 115%; position: relative;\"&gt;&lt;span id=\"MJXc-Node-1\" class=\"mjx-math\" aria-hidden=\"true\"&gt;&lt;span id=\"MJXc-Node-2\" class=\"mjx-mrow\"&gt;&lt;span id=\"MJXc-Node-3\" class=\"mjx-semantics\"&gt;&lt;span id=\"MJXc-Node-4\" class=\"mjx-mrow\"&gt;&lt;span id=\"MJXc-Node-5\" class=\"mjx-mi\"&gt;&lt;span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.22em; padding-bottom: 0.274em;\"&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=\"MJX_Assistive_MathML\" role=\"presentation\"&gt;&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=\"application/x-tex\"&gt; r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/span&gt; &lt;script type=\"math/mml\" id=\"MathJax-Element-1\"&gt; &lt;math&gt; &lt;semantics&gt; &lt;mrow&gt; &lt;mi&gt;r&lt;/mi&gt; &lt;/mrow&gt; &lt;annotation encoding=\"application/x-tex\"&gt;r&lt;/annotation&gt; &lt;/semantics&gt; &lt;/math&gt; &lt;/script&gt; &lt;/span&gt; &lt;span class=\"katex-html\" aria-hidden=\"true\"&gt;&lt;span class=\"base\"&gt;&lt;span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"&gt;&lt;/span&gt;&lt;span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\"&gt;r&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt; 以及我建议作者把mathjax.ejs里的那句console.log(&quot;mathjax did loaded!&quot;);删掉，不然有时候一打开网页就出来三百多条log，令人很困惑。。。 纯用KaTeX 我大胆猜测KaTeX是全局引用的（毕竟是放到renderer里面了……）。因此，为了防止mathjax被用到，我进行了以下配置： 在博客根目录_config.yml中添加 12math: engine: 'katex' 在post的front-matter中添加mathjax: false（不过好像保持为true也没有什么风险） 在hexo-renderer-markdown-it-plus中启用markdown-it-katex插件 引入最新版KaTeX CSS： 123import: link: - \"&lt;link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.css'&gt;\" 此时本地和远程渲染结果也相同： 此时渲染出来的HTML看起来变简洁了： 123456789101112131415161718&lt;span class=\"katex\"&gt; &lt;span class=\"katex-mathml\"&gt; &lt;math&gt; &lt;semantics&gt; &lt;mrow&gt; &lt;mi&gt;r&lt;/mi&gt; &lt;/mrow&gt; &lt;annotation encoding=\"application/x-tex\"&gt;r&lt;/annotation&gt; &lt;/semantics&gt; &lt;/math&gt; &lt;/span&gt; &lt;span class=\"katex-html\" aria-hidden=\"true\"&gt; &lt;span class=\"base\"&gt; &lt;span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"&gt;&lt;/span&gt; &lt;span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\"&gt;r&lt;/span&gt; &lt;/span&gt; &lt;/span&gt;&lt;/span&gt; 为什么会出现问题？ 几种猜测： MathJax版本为2.7.1，太旧了（×） 也不是没有这种可能。 本地nodejs和npm的版本太旧了（×） 但是远程渲染也有问题。 hexo-renderer-markdown-it-plus默认包含KaTeX，和MathJax不兼容（？） 这也许可以解释为什么渲染出来都是katex-block 不过KaTeX自己居然也渲染不好…… hexo-renderer-markdown-it-plus这个渲染器有问题（√） 很有可能。也许我应该换一个渲染器 作者的有些CSS设置和MathJax冲突了（×） 网上好像有过这样的说法。 博客的_config.yml中设置的math engine和renderer冲突了（×） 令人深思的想法 博客安装的包之间有冲突（？） 实验材料 相关文段如下（备用）： 我们重新考虑一下半径的问题。以半径$r$作为随机变量，则随机点落在$r$范围内的概率分布为 $$\\text{CDF}(r) = \\frac{r^2}{R^2}$$ $$\\text{PDF}(r) = \\frac{d}{dr} \\text{CDF}(r) = \\frac{2r}{R^2}$$ 以[0, 1]均匀分布对$\\text{CDF}(r)$进行随机，则有$r = R \\sqrt{\\text{rand}()}$。 实验1：hexo-renderer-marked + mathjax（默认配置） 此时同样的公式显示没有任何问题： 结论：作者写的应该没什么问题。 package.json： 1234567891011121314151617181920212223242526272829&#123; \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": &#123; \"version\": \"3.8.0\" &#125;, \"dependencies\": &#123; \"hexo\": \"^3.3.0\", \"hexo-autoprefixer\": \"^1.0.0\", \"hexo-generator-archive\": \"^0.1.2\", \"hexo-generator-category\": \"^0.1.2\", \"hexo-generator-feed\": \"^1.2.2\", \"hexo-generator-index\": \"^0.1.2\", \"hexo-generator-json-content\": \"^3.0.1\", \"hexo-generator-search\": \"^2.4.0\", \"hexo-generator-seo-friendly-sitemap\": \"0.0.22\", \"hexo-generator-tag\": \"^0.1.1\", \"hexo-helper-qrcode\": \"^1.0.2\", \"hexo-lazyload-image\": \"^1.0.3\", \"hexo-related-popular-posts\": \"^3.0.3\", \"hexo-renderer-ejs\": \"^0.3.0\", \"hexo-renderer-less\": \"^0.2.0\", \"hexo-renderer-marked\": \"^0.3.0\", \"hexo-renderer-stylus\": \"^0.3.0\", \"hexo-deployer-git\": \"^0.3.1\", \"hexo-server\": \"^0.2.0\" &#125;&#125; _config.yml中没有关于mathjax的特殊配置。 实验2：hexo-renderer-markdown-it-plus 卸载hexo-renderer-marked，安装hexo-renderer-markdown-it-plus。 实验2.1：hexo-renderer-markdown-it-plus + mathjax 在配置文件中disable KaTeX（但不加入关于math engine的配置），如上文。其余配置不变。 发现渲染挂了，而且挂得和之前一样。 结论：hexo-renderer-markdown-it-plus会直接导致mathjax渲染出问题。 实验2.2：hexo-renderer-markdown-it-plus + katex 在配置文件中enable KaTeX（但不加入关于math engine的配置），并引入最新版KaTeX CSS，如上文。其余配置不变。 发现渲染出现了一点错位，不过比我的博客中出现的状况要好一点。 而且我发现此主题中，MathJaX渲染的公式会带个灰色的底，KaTex渲染的则不会。 是否配置math engine对结果没有影响。 结论：hexo-renderer-markdown-it-plus的katex渲染可能也有问题。 注：我也测试了npm和node升级之后的生成状况，发现状态不变，还是有bug。 package.json： 1234567891011121314151617181920212223242526272829&#123; \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": &#123; \"version\": \"3.8.0\" &#125;, \"dependencies\": &#123; \"hexo\": \"^3.3.0\", \"hexo-autoprefixer\": \"^1.0.0\", \"hexo-deployer-git\": \"^0.3.1\", \"hexo-generator-archive\": \"^0.1.2\", \"hexo-generator-category\": \"^0.1.2\", \"hexo-generator-feed\": \"^1.2.2\", \"hexo-generator-index\": \"^0.1.2\", \"hexo-generator-json-content\": \"^3.0.1\", \"hexo-generator-search\": \"^2.4.0\", \"hexo-generator-seo-friendly-sitemap\": \"0.0.22\", \"hexo-generator-tag\": \"^0.1.1\", \"hexo-helper-qrcode\": \"^1.0.2\", \"hexo-lazyload-image\": \"^1.0.3\", \"hexo-related-popular-posts\": \"^3.0.3\", \"hexo-renderer-ejs\": \"^0.3.0\", \"hexo-renderer-less\": \"^0.2.0\", \"hexo-renderer-markdown-it-plus\": \"^1.0.4\", \"hexo-renderer-stylus\": \"^0.3.0\", \"hexo-server\": \"^0.2.0\" &#125;&#125; _config.yml： 1234567891011121314151617```ymlimport: link: - \"&lt;link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.css'&gt;\"markdown: render: html: true breaks: true linkify: true plugins: - plugin: name: markdown-it-katex enable: true/false - plugin: name: markdown-it-mark enable: false 实验3：hexo-renderer-markdown-it 卸载hexo-renderer-marked，安装hexo-renderer-markdown-it。 之前我用的就是这个renderer，因为它自带footnote功能。（但是它似乎无法生成TOC位置anchor，所以文章目录的链接点不动）它并没有自带KaTeX。不过我也没有特意测试过它的公式显示效果。 配置mathjax为math engine。（虽然写katex也是一样的） 发现公式显示是正常的。 在这个renderer上自己加katex实在比较麻烦，我懒得试了。 结论：hexo-renderer-markdown-it-plus加katex加出锅来了。 package.json： 1234567891011121314151617181920212223242526272829&#123; \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": &#123; \"version\": \"3.8.0\" &#125;, \"dependencies\": &#123; \"hexo\": \"^3.3.0\", \"hexo-autoprefixer\": \"^1.0.0\", \"hexo-deployer-git\": \"^0.3.1\", \"hexo-generator-archive\": \"^0.1.2\", \"hexo-generator-category\": \"^0.1.2\", \"hexo-generator-feed\": \"^1.2.2\", \"hexo-generator-index\": \"^0.1.2\", \"hexo-generator-json-content\": \"^3.0.1\", \"hexo-generator-search\": \"^2.4.0\", \"hexo-generator-seo-friendly-sitemap\": \"0.0.22\", \"hexo-generator-tag\": \"^0.1.1\", \"hexo-helper-qrcode\": \"^1.0.2\", \"hexo-lazyload-image\": \"^1.0.3\", \"hexo-related-popular-posts\": \"^3.0.3\", \"hexo-renderer-ejs\": \"^0.3.0\", \"hexo-renderer-less\": \"^0.2.0\", \"hexo-renderer-markdown-it\": \"^3.4.1\", \"hexo-renderer-stylus\": \"^0.3.0\", \"hexo-server\": \"^0.2.0\" &#125;&#125; _config.yml： 123456789101112math: engine: 'mathjax'/'katex'# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true breaks: true linkify: true plugins: - markdown-it-footnote 实验4：hexo-renderer-markdown-it + 我自己的博客 我居然忘了当初hexo-renderer-markdown-it在我自己博客上公式出了啥问题了。于是我换成hexo-renderer-markdown-it，结果连编译都编译不了，hexo-generator-feed插件出问题。在网上四处查了一圈，据说是npm和nodejs版本太低了（确实低）。然后我就升级了npm，结果还是不行，于是我就干脆把这插件先给删了。 最后我发现我忘了安装renderer了，所以什么都没渲染出来，de了半天bug，发现忘了改config了。 最后我发现我自己用回hexo-renderer-markdown-it之后，公式一点毛病都没有了，好得很，除了TOC点不动以外没什么大毛病。我很困惑，不过就先这样吧。 （hexo-renderer-markdown-it和hexo-renderer-markdown-it-plus能不能中和一下？？？） 一些测不动了的东西 我猜即使安装了hexo-math也不能就让hexo-renderer-markdown-it用katex进行渲染，所以就懒得试了。 不知道hexo-renderer-pandoc怎么样。 我大胆猜测各npm插件之间没有冲突。 ……","categories":[],"tags":[]},{"title":"mathjax测试","slug":"2019-04-04-mathjax测试","date":"2019-04-04T04:19:50.000Z","updated":"2019-04-07T14:28:32.377Z","comments":true,"path":"pure-mathjax-test/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/pure-mathjax-test/","excerpt":"在front-matter中设置了mathjax: true。","text":"在front-matter中设置了mathjax: true。 转义冲突的问题通常可以通过应用 ... 标签解决，虽然这不一定是个好方法。 很显然，有些问题无法直接这么解决。 使用的渲染器 hexo-renderer-marked npm： 1hexo-renderer-marked@0.3.2 额外配置：无 简单行内公式 源代码 1$a$ 显示结果 直接渲染： $a$ 加tag后渲染： $a$ hexo-renderer-marked 换行渲染测试 一般的markdown渲染器都会将\\\\转义为\\，因此在公式中用\\\\换行是无效的。一种愚蠢的解决方法是打四个\\。稍好的解决方法是使用 ... 。 源代码 12345678$$\\begin&#123;eqnarray&#125;\\nabla\\cdot\\vec&#123;E&#125; &amp;=&amp; \\frac&#123;\\rho&#125;&#123;\\epsilon_0&#125; \\\\\\nabla\\cdot\\vec&#123;B&#125; &amp;=&amp; 0 \\\\\\nabla\\times\\vec&#123;E&#125; &amp;=&amp; -\\frac&#123;\\partial B&#125;&#123;\\partial t&#125; \\\\\\nabla\\times\\vec&#123;B&#125; &amp;=&amp; \\mu_0\\left(\\vec&#123;J&#125;+\\epsilon_0\\frac&#123;\\partial E&#125;&#123;\\partial t&#125; \\right)\\end&#123;eqnarray&#125;$$ 显示结果 $$ \\begin{eqnarray} \\nabla\\cdot\\vec{E} &amp;=&amp; \\frac{\\rho}{\\epsilon_0} \\ \\nabla\\cdot\\vec{B} &amp;=&amp; 0 \\ \\nabla\\times\\vec{E} &amp;=&amp; -\\frac{\\partial B}{\\partial t} \\ \\nabla\\times\\vec{B} &amp;=&amp; \\mu_0\\left(\\vec{J}+\\epsilon_0\\frac{\\partial E}{\\partial t} \\right) \\end{eqnarray} $$ hexo-renderer-marked 换行渲染挂了。 下划线渲染测试 源代码 1$$R_&#123;m \\times n&#125; = U_&#123;m\\times m&#125;S_&#123;m \\times n&#125;V_&#123;n \\times n&#125;$$ 显示结果 $E_{in} \\thickapprox E_{out} $ $E_{in} \\thickapprox 0$ $$R_{m \\times n} = U_{m\\times m}S_{m \\times n}V_{n \\times n}'$$ $R_{m \\times n} = U_{m\\times m}S_{m \\times n}V_{n \\times n}'$ hexo-renderer-marked 双花括号测试 似乎hexo-renderer-marked不能正常处理双花括号。 源代码 1$$\\frac&#123;1&#125;&#123;&#123;(2\\pi)&#125;^\\frac&#123;D&#125;&#123;2&#125;&#125;$$ 显示结果 // -- hexo-renderer-marked 博客完全无法编译，会报错。 渲染器总结 hexo-renderer-marked 无公式支持，需要hexo-math 对出现不支持语法的公式支持极差，无法编译 参考文献 简书 - Hexo中的LaTex公式渲染问题","categories":[],"tags":[]},{"title":"excerpt和description测试","slug":"2019-04-03-excerpt和description测试","date":"2019-04-03T11:55:37.000Z","updated":"2019-04-03T11:57:00.819Z","comments":true,"path":"excerpt-and-description-test/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/excerpt-and-description-test/","excerpt":"","text":"这里写了一句话，但是下面没有&lt;!--more--&gt;，所以应该显示摘要，且应该显示front-matter的description中写的内容。 官方文档 - 页面配置 - Front-matter中说，excerpt是layout=post时特有的字段。 官方文档 - 页面配置- 文章摘要中说： 第一优先级是寻找正文中的&lt;!--more--&gt;，其前面的为摘要，可以显示在文章列表中，后面的是正文。 如果没有，则寻找Front-matter中的excerpt字段，以其为摘要。 如果还没有，就没有摘要，文章列表会显示全文。","categories":[],"tags":[]},{"title":"excerpt测试2","slug":"2019-04-03-excerpt测试2","date":"2019-04-03T11:27:11.000Z","updated":"2019-04-03T11:29:13.848Z","comments":true,"path":"excerpt-test-2/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/excerpt-test-2/","excerpt":"这里写了一句话，而且下面有&lt;!--more--&gt;，所以应该显示摘要，且摘要应该显示这句话。","text":"这里写了一句话，而且下面有&lt;!--more--&gt;，所以应该显示摘要，且摘要应该显示这句话。 官方文档 - 页面配置 - Front-matter中说，excerpt是layout=post时特有的字段。 官方文档 - 页面配置- 文章摘要中说： 第一优先级是寻找正文中的&lt;!--more--&gt;，其前面的为摘要，可以显示在文章列表中，后面的是正文。 如果没有，则寻找Front-matter中的excerpt字段，以其为摘要。 如果还没有，就没有摘要，文章列表会显示全文。","categories":[],"tags":[]},{"title":"excerpt测试1","slug":"2019-04-03-excerpt测试","date":"2019-04-03T11:18:46.000Z","updated":"2019-04-03T11:57:06.662Z","comments":true,"path":"excerpt-test-1/","link":"","permalink":"http://zhanghuimeng.github.io/blog-example/excerpt-test-1/","excerpt":"","text":"这里写了一句话，但是下面没有&lt;!--more--&gt;，所以应该显示摘要，且应该显示front-matter的excerpt中写的内容。 官方文档 - 页面配置 - Front-matter中说，excerpt是layout=post时特有的字段。 官方文档 - 页面配置- 文章摘要中说： 第一优先级是寻找正文中的&lt;!--more--&gt;，其前面的为摘要，可以显示在文章列表中，后面的是正文。 如果没有，则寻找Front-matter中的excerpt字段，以其为摘要。 如果还没有，就没有摘要，文章列表会显示全文。","categories":[],"tags":[]}]}